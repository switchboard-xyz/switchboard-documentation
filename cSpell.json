{
  "version": "0.2",
  "language": "en",
  "words": [],
  "ignoreWords": [
    "sol",
    "oraclequeue",
    "oclif",
    "switchboard",
    "switchboardv2-api",
    "devnet",
    "grafana",
    "Kubernetes",
    "kubernetes",
    "blockhash",
    "solana",
    "Solana",
    "Pagerduty",
    "PAGERDUTY",
    "twap",
    "TWAP",
    "unstyled",
    "pypi",
    "switchboardpy",
    "crankers",
    "incentivized",
    "collateralized",
    "Quickstart",
    "LOADBALANCER",
    "Permissionless",
    "Permissioned",
    "gcloud",
    "heartbeating",
    "heartbeated",
    "disincentivizes",
    "incentivizes",
    "keypairs",
    "solflare",
    "sollet",
    "Bignum",
    "subjobs",
    "raydium",
    "orderbook",
    "Protobuf",
    "sint",
    "Fixnum",
    "ulong",
    "sfixed",
    "pubkeys",
    "pubkey",
    "proto",
    "xstep",
    "websockets",
    "opentelemetry",
    "Keypair",
    "keypair",
    "unpermissioned",
    "funder",
    "discluded",
    "switchboardv",
    "gethttpsforfree",
    "letsencrypt",
    "PROJECTNAME",
    "localnet",
    "Congraph",
    "devicons",
    "protos",
    "Pricetags",
    "Borsh",
    "ecvrf",
    "Deserialization",
    "ebuf",
    "repr",
    "curr",
    "Withdrawl",
    "Invalide",
    "lamports",
    "Hashbuf",
    "invertee",
    "Ristretto",
    "struct",
    "Blockhashes",
    "precisioned",
    "permissioninitparams",
    "setauthority",
    "bytemuck",
    "nocolor",
    "requestrandomness",
    "aggregatorkey",
    "oraclekey",
    "queuekey",
    "jobKey",
    "queuepermitaggregator",
    "setrewards",
    "saveresult",
    "queuecreate",
    "oraclecreate",
    "oraclequeueinitparams",
    "oraclewithdraw",
    "oraclewithdrawparams",
    "leaseinitparams",
    "leasewithdrawparams",
    "leaseextendparams",
    "jobinitparams",
    "setbatchsize",
    "aggregatorupdate",
    "aggregatorcreatejson",
    "definitionfile",
    "addjob",
    "aggregatoraddjob",
    "removejob",
    "aggregatoremovejob",
    "sethistorybuffer",
    "setminjobs",
    "setminoracles",
    "crankinitparams",
    "openround",
    "Sysvar",
    "AAAA",
    "BADC",
    "BACD",
    "ADDA",
    "CBCB",
    "ABDC",
    "DBBD",
    "CACA",
    "disincentivize",
    "repush",
    "repushed",
    "Composability",
    "pyth",
    "chainlink",
    "walkthrough",
    "defi",
    "sushiswap",
    "solend",
    "larix",
    "mbps",
    "genesys",
    "syndica"
  ],
  "ignoreRegExpList": [
    "\\((.*)\\)", // Markdown links
    "```[a-z]*\n[\\s\\S]*?\n```", // Markdown code blocks. h/t https://coderwall.com/p/r6b4xg/regex-to-match-github-s-markdown-code-blocks,
    "\\`([^\\`].*?)\\`", // inline code blocks. h/t https://stackoverflow.com/questions/41274241/how-to-capture-inline-markdown-code-but-not-a-markdown-code-fence-with-regex
    "\\{%.*%\\}", // liquid syntax
    "/^\\s*```[\\s\\S]*?^\\s*```/gm", // Another attempt at markdown code blocks. https://github.com/streetsidesoftware/vscode-spell-checker/issues/202#issuecomment-377477473
    "^---[\\s\\S]*?---$" // YAML front-matter
  ]
}
