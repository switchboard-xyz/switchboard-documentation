"use strict";(self.webpackChunk_switchboard_xyz_v2_docs=self.webpackChunk_switchboard_xyz_v2_docs||[]).push([[8654],{5318:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=s(n),m=o,f=b["".concat(p,".").concat(m)]||b[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=b;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},9746:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return l},metadata:function(){return b},toc:function(){return m}});var r=n(5773),o=n(808),a=(n(7378),n(5318)),i=["components"],c={toc:[{value:"<code>sbv2 job:create:copy JOBSOURCE</code>",id:"sbv2-jobcreatecopy-jobsource",children:[],level:2},{value:"<code>sbv2 job:create:json DEFINITIONFILE</code>",id:"sbv2-jobcreatejson-definitionfile",children:[],level:2},{value:"<code>sbv2 job:create:template TEMPLATE ID</code>",id:"sbv2-jobcreatetemplate-template-id",children:[],level:2}]};function p(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"interact with a switchboard job account"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#sbv2-jobcreatecopy-jobsource"},(0,a.kt)("inlineCode",{parentName:"a"},"sbv2 job:create:copy JOBSOURCE"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#sbv2-jobcreatejson-definitionfile"},(0,a.kt)("inlineCode",{parentName:"a"},"sbv2 job:create:json DEFINITIONFILE"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#sbv2-jobcreatetemplate-template-id"},(0,a.kt)("inlineCode",{parentName:"a"},"sbv2 job:create:template TEMPLATE ID")))),(0,a.kt)("h2",{id:"sbv2-jobcreatecopy-jobsource"},(0,a.kt)("inlineCode",{parentName:"h2"},"sbv2 job:create:copy JOBSOURCE")),(0,a.kt)("p",null,"copy a job account"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 job:create:copy JOBSOURCE\n\nARGUMENTS\n  JOBSOURCE  public key of the aggregator account to copy\n\nOPTIONS\n  -f, --outputFile=outputFile  output file to save job definition to\n  -h, --help                   show CLI help\n\n  -k, --keypair=keypair        keypair that will pay for onchain transactions. defaults to new account authority if no\n                               alternate authority provided\n\n  -s, --silent                 suppress cli prompts\n\n  -u, --rpcUrl=rpcUrl          alternate RPC url\n\n  -v, --verbose                log everything\n\n  --force                      skip job confirmation\n\n  --mainnetBeta                WARNING: use mainnet-beta solana cluster\n\nEXAMPLE\n  $ sbv2 job:create:copy 7pdb5RVM6cVBU8XDfpGqakb1S4wX2i5QsZxT117tK4HS --keypair ../payer-keypair.json\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"See code: ",(0,a.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboardv2-cli/blob/v0.1.4/src/commands/job/create/copy.ts"},"src/commands/job/create/copy.ts"))),(0,a.kt)("h2",{id:"sbv2-jobcreatejson-definitionfile"},(0,a.kt)("inlineCode",{parentName:"h2"},"sbv2 job:create:json DEFINITIONFILE")),(0,a.kt)("p",null,"create a job from a json file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 job:create:json DEFINITIONFILE\n\nARGUMENTS\n  DEFINITIONFILE  filesystem path of job definition json file\n\nOPTIONS\n  -h, --help                                 show CLI help\n\n  -k, --keypair=keypair                      keypair that will pay for onchain transactions. defaults to new account\n                                             authority if no alternate authority provided\n\n  -s, --silent                               suppress cli prompts\n\n  -u, --rpcUrl=rpcUrl                        alternate RPC url\n\n  -v, --verbose                              log everything\n\n  --aggregatorAuthority=aggregatorAuthority  filesystem path of aggregator authority keypair to add job account to\n\n  --aggregatorKey=aggregatorKey              public key of aggregator to add job to\n\n  --force                                    overwrite output file\n\n  --mainnetBeta                              WARNING: use mainnet-beta solana cluster\n\n  --outputFile=outputFile                    output job schema to a json file\n\nALIASES\n  $ sbv2 json:create:job\n\nEXAMPLE\n  $ sbv2 job:create:json examples/job.json --keypair ../payer-keypair.json \n  --aggregatorAuthority=../aggregator-keypair.json --outputFile=job.schema.json\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"See code: ",(0,a.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboardv2-cli/blob/v0.1.4/src/commands/job/create/json.ts"},"src/commands/job/create/json.ts"))),(0,a.kt)("h2",{id:"sbv2-jobcreatetemplate-template-id"},(0,a.kt)("inlineCode",{parentName:"h2"},"sbv2 job:create:template TEMPLATE ID")),(0,a.kt)("p",null,"create a new on-chain job account from an existing template"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"USAGE\n  $ sbv2 job:create:template TEMPLATE ID\n\nARGUMENTS\n  TEMPLATE  the template type (ftxUs/coinbase/etc) or the filesystem path to the json file containing the task\n            definitions\n\n  ID        api endpoint id for a given source\n\nOPTIONS\n  -f, --outputFile=outputFile  output file to save job definition to\n  -h, --help                   show CLI help\n\n  -k, --keypair=keypair        keypair that will pay for onchain transactions. defaults to new account authority if no\n                               alternate authority provided\n\n  -k, --outKeypair=outKeypair  existing keypair file to store new account. useful for using the same public key on\n                               different clusters\n\n  -n, --name=name              name of the job account for easier identification\n\n  -s, --silent                 suppress cli prompts\n\n  -u, --rpcUrl=rpcUrl          alternate RPC url\n\n  -v, --verbose                log everything\n\n  --force                      skip job confirmation\n\n  --mainnetBeta                WARNING: use mainnet-beta solana cluster\n\nEXAMPLES\n  $ sbv2 job:create:template ftxUs BTC_USD --keypair ../payer-keypair.json\n  $ sbv2 job:create:template ftxUs BTC_USD --keypair ../payer-keypair.json --name=ftxUs_Btc\n  $ sbv2 job:create:template ftxUs BTC_USD -k ../payer-keypair.json -n ftxUs_Btc -f ftx_us_btc_job.json\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"See code: ",(0,a.kt)("a",{parentName:"em",href:"https://github.com/switchboard-xyz/switchboardv2-cli/blob/v0.1.4/src/commands/job/create/template.ts"},"src/commands/job/create/template.ts"))))}p.isMDXComponent=!0;var s=["components"],l={sidebar_position:10,title:"sbv2 job"},u=void 0,b={unversionedId:"switchboardv2-cli/job",id:"switchboardv2-cli/job",title:"sbv2 job",description:"",source:"@site/api/switchboardv2-cli/job.mdx",sourceDirName:"switchboardv2-cli",slug:"/switchboardv2-cli/job",permalink:"/api/switchboardv2-cli/job",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"sbv2 job"},sidebar:"tutorialSidebar",previous:{title:"sbv2 print",permalink:"/api/switchboardv2-cli/print"},next:{title:"sbv2 aggregator",permalink:"/api/switchboardv2-cli/aggregator"}},m=[],f={toc:m};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(p,{mdxType:"Sbv2Job"}))}d.isMDXComponent=!0}}]);