"use strict";(self.webpackChunk_switchboard_xyz_v2_docs=self.webpackChunk_switchboard_xyz_v2_docs||[]).push([[9322],{5318:function(t,e,n){n.d(e,{Zo:function(){return s},kt:function(){return p}});var l=n(7378);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,l)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function u(t,e){if(null==t)return{};var n,l,r=function(t,e){if(null==t)return{};var n,l,r={},o=Object.keys(t);for(l=0;l<o.length;l++)n=o[l],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(l=0;l<o.length;l++)n=o[l],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var i=l.createContext({}),c=function(t){var e=l.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},s=function(t){var e=c(t.components);return l.createElement(i.Provider,{value:e},t.children)},k={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},d=l.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,i=t.parentName,s=u(t,["components","mdxType","originalType","parentName"]),d=c(n),p=r,b=d["".concat(i,".").concat(p)]||d[p]||k[p]||o;return n?l.createElement(b,a(a({ref:e},s),{},{components:n})):l.createElement(b,a({ref:e},s))}));function p(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,a=new Array(o);a[0]=d;var u={};for(var i in e)hasOwnProperty.call(e,i)&&(u[i]=e[i]);u.originalType=t,u.mdxType="string"==typeof t?t:r,a[1]=u;for(var c=2;c<o;c++)a[c]=n[c];return l.createElement.apply(null,a)}return l.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5310:function(t,e,n){n.d(e,{Z:function(){return f}});var l=n(5773),r=n(808),o=n(7378),a=n(8944),u=n(5642),i=n(1652),c=n(3772),s=n(6206),k=n(4246);const d=["className","component"];var p=n(4907);const b=function(t={}){const{defaultTheme:e,defaultClassName:n="MuiBox-root",generateClassName:p,styleFunctionSx:b=i.Z}=t,f=(0,u.ZP)("div")(b);return o.forwardRef((function(t,o){const u=(0,s.Z)(e),i=(0,c.Z)(t),{className:b,component:h="div"}=i,m=(0,r.Z)(i,d);return(0,k.jsx)(f,(0,l.Z)({as:h,ref:o,className:(0,a.Z)(b,p?p(n):n),theme:u},m))}))}({defaultTheme:(0,n(2905).Z)(),defaultClassName:"MuiBox-root",generateClassName:p.Z.generate});var f=b},3772:function(t,e,n){n.d(e,{Z:function(){return i}});var l=n(5773),r=n(808),o=n(3143),a=n(7351);const u=["sx"];function i(t){const{sx:e}=t,n=(0,r.Z)(t,u),{systemProps:i,otherProps:c}=(t=>{const e={systemProps:{},otherProps:{}};return Object.keys(t).forEach((n=>{a.Gc[n]?e.systemProps[n]=t[n]:e.otherProps[n]=t[n]})),e})(n);let s;return s=Array.isArray(e)?[i,...e]:"function"==typeof e?(...t)=>{const n=e(...t);return(0,o.P)(n)?(0,l.Z)({},i,n):i}:(0,l.Z)({},i,e),(0,l.Z)({},c,{sx:s})}},6003:function(t,e,n){var l=n(5310),r=n(7378),o=n(1142),a=n(2638);e.Z=function(t){var e=(0,a.Z)().isDarkTheme,n="inherit";t.lightBg&&!e&&(n=t.lightBg),t.darkBg&&e&&(n=t.darkBg);var u={};return t.sx&&(u=Object.assign({backgroundColor:n,m:"auto",display:"flex"},u,t.sx)),r.createElement(l.Z,{component:"img",sx:u,src:(0,o.Z)(t.img)})}},832:function(t,e,n){n.r(e),n.d(e,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return k}});var l=n(5773),r=n(808),o=(n(7378),n(5318)),a=n(6003),u=["components"],i={sidebar_position:1,id:"oracle",slug:"/oracle",title:"Introduction"},c="Introduction",s={unversionedId:"oracle/oracle",id:"oracle/oracle",title:"Introduction",description:"A Switchboard oracle is a node container that sits between the internet and a Solana RPC node and facilitates update request when invoked by a queue. Before running an oracle you will need to:",source:"@site/docs/oracle/introduction.mdx",sourceDirName:"oracle",slug:"/oracle",permalink:"/oracle",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"oracle",slug:"/oracle",title:"Introduction"},sidebar:"tutorialSidebar",previous:{title:"Activities",permalink:"/architecture/randomness/activities"},next:{title:"Oracle Account",permalink:"/oracle/account"}},k=[{value:"Requirements",id:"requirements",children:[],level:2},{value:"Config",id:"config",children:[{value:"Solana Config",id:"solana-config",children:[],level:3},{value:"Oracle Config",id:"oracle-config",children:[],level:3},{value:"Oracle Keypairs",id:"oracle-keypairs",children:[],level:3},{value:"Monitoring Config",id:"monitoring-config",children:[],level:3}],level:2}],d={toc:k};function p(t){var e=t.components,n=(0,r.Z)(t,u);return(0,o.kt)("wrapper",(0,l.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"A Switchboard oracle is a node container that sits between the internet and a Solana RPC node and facilitates update request when invoked by a queue. Before running an oracle you will need to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Oracle Account")," - Create an oracle account using the desired oracle queue public key"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Stake Account")," - Fund the staking account with the minimum staking amount set by the oracle queue"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Grant Queue Permissions")," - Submit DAO approval to the discord to join a Switchboard oracle queue")),(0,o.kt)(a.Z,{img:"/img/adding_new_oracles.png",mdxType:"MarkdownImage"}),(0,o.kt)("h2",{id:"requirements"},"Requirements"),(0,o.kt)("p",null,"Running an oracle allows you to contribute to the switchboard network and get compensated for your compute time. In order to run a node and avoid slashing, you should have the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Dedicated RPC endpoint with reliable up-time, capable of supporting websocket connections"),(0,o.kt)("li",{parentName:"ul"},"Kubernetes hosting provider (preferebly Google Cloud Platform to start) or any infrastructure with reliable uptime and monitoring capabilities"),(0,o.kt)("li",{parentName:"ul"},"Wrapped SOL wallet to fund staking account")),(0,o.kt)("h2",{id:"config"},"Config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'env title=".env"',env:!0,title:'".env"'},'# Solana Config\nLIVE=1\nCLUSTER=""\nRPC_URL=""\nWS_URL=""\nBACKUP_MAINNET_RPC=""\n# Oracle Config\nORACLE_KEY=""\nHEARTBEAT_INTERVAL=15\nGCP_CONFIG_BUCKET=""\n# Oracle Keypairs\nPAYER_SECRET_PATH=""\nPAYER_SECRETS=""\nGOOGLE_PAYER_SECRET_PATH=""\n# Monitoring Config\nMETRICS_EXPORTER\nPAGERDUTY_EVENT_KEY=""\nVERBOSE=1\n')),(0,o.kt)("h3",{id:"solana-config"},"Solana Config"),(0,o.kt)("table",null,(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",null,"Env Variable"),(0,o.kt)("th",null,"Definition"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"LIVE"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Required")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type ")," - Flag (0 or 1)",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Set to 0 for localnet, 1 for devnet/mainnet-beta")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"CLUSTER"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Required")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - String (devnet / mainnet-beta)",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Solana cluster you will be running an oracle on (mainnet-beta/devnet)")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"RPC_URL"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Required")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - URL",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Solana RPC URL that must be capable of supporting websockets. The default RPC pools should be avoided at all cost as you will quickly hit the rate limits and risk being slashed")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"WS_URL"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Optional")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - URL",(0,o.kt)("br",null),(0,o.kt)("b",null,"Default")," - RPC_URL",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Websocket URL to connect to a Solana RPC server. If not provided, oracle will fallback to RPC_URL")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"BACKUP_MAINNET_RPC"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Optional")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - URL",(0,o.kt)("br",null),(0,o.kt)("b",null,"Default")," - https://api.mainnet-beta.solana.com",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Backup RPC URL in case of network congestion")))),(0,o.kt)("h3",{id:"oracle-config"},"Oracle Config"),(0,o.kt)("table",null,(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",null,"Env Variable"),(0,o.kt)("th",null,"Definition"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"ORACLE_KEY"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Required")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - Public Key",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Public key of the oracle account that has been granted permissions to use an oracle queue ",(0,o.kt)("br",null),(0,o.kt)("a",{href:"../oracle/account#create-oracle"},"Oracle Account #Create Oracle"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"HEARTBEAT_INTERVAL"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Optional")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - Number (seconds)",(0,o.kt)("br",null),(0,o.kt)("b",null,"Default")," - 30",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Seconds between oracle heartbeats. Queues have different oracle heartbeat requirements. Recommended value is 15")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"GCP_CONFIG_BUCKET"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Optional")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - GCP Resource Path",(0,o.kt)("br",null),(0,o.kt)("b",null,"Default")," - Looks for configs.json in the current working directory. If not found, no config is loaded.",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Contains API keys for private API endpoints",(0,o.kt)("br",null),(0,o.kt)("a",{href:"../oracle/gcp/manual-setup#storage-bucket"},"GCP Manual Setup #StorageBucket"))))),(0,o.kt)("h3",{id:"oracle-keypairs"},"Oracle Keypairs"),(0,o.kt)("p",null,"You must provide one of the following environment variables, which is the same keypair that is the authority for the given ",(0,o.kt)("inlineCode",{parentName:"p"},"$ORACLE_KEY")," and will pay for any on-chain transactions."),(0,o.kt)("table",null,(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",null,"Env Variable"),(0,o.kt)("th",null,"Definition"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"PAYER_SECRET_PATH"),(0,o.kt)("td",null,(0,o.kt)("b",null,"Type")," - Filesystem Path",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Local filesystem path to keypair file that will pay for on-chain transactions and is the authority for the oracle")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"PAYER_SECRETS"),(0,o.kt)("td",null,(0,o.kt)("b",null,"Type")," - Docker Secret",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Docker Secret path to keypair file that will pay for on-chain transactions and is the authority for the oracle")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"GOOGLE_PAYER_SECRET_PATH"),(0,o.kt)("td",null,(0,o.kt)("b",null,"Type")," - GCP Resource Path",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Google cloud resource to manage your keypair securely.",(0,o.kt)("br",null),(0,o.kt)("a",{href:"../oracle/gcp/manual-setup#oracle-payer-secret"},"GCP Manual Setup #OraclePayerSecret"))))),(0,o.kt)("h3",{id:"monitoring-config"},"Monitoring Config"),(0,o.kt)("table",null,(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",null,"Env Variable"),(0,o.kt)("th",null,"Definition"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"METRICS_EXPORTER"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Optional")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - prometheus / gcp / opentelemetry-collector*",(0,o.kt)("br",null),(0,o.kt)("b",null,"Default")," - prometheus",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Dictates which metric suite to aggregate resource metrics, as defined in:",(0,o.kt)("br",null),(0,o.kt)("a",{href:"oracle/monitor"},"Oracle - Monitoring"),(0,o.kt)("br",null),"*opentelemetry-collector only supports the default endpoint localhost:55681/v1/metric")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"PAGERDUTY_EVENT_KEY"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Optional")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - String",(0,o.kt)("br",null),(0,o.kt)("b",null,"Default")," - Paging disabled",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Token provided by pagerduty for sending pages about various alerts.",(0,o.kt)("br",null),(0,o.kt)("a",{href:"oracle/monitor#alerts"},"Oracle - Alerts"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"VERBOSE"),(0,o.kt)("td",null,(0,o.kt)("b",null,(0,o.kt)("u",null,"Optional")),(0,o.kt)("br",null),(0,o.kt)("b",null,"Type")," - Flag (0 or 1)",(0,o.kt)("br",null),(0,o.kt)("b",null,"Default")," - 0, normal logging",(0,o.kt)("br",null),(0,o.kt)("b",null,"Description")," - Set to 1 to increase the level of logging")))))}p.isMDXComponent=!0}}]);