"use strict";(self.webpackChunk_switchboard_xyz_v2_docs=self.webpackChunk_switchboard_xyz_v2_docs||[]).push([[3740],{5310:function(e,t,a){a.d(t,{Z:function(){return k}});var n=a(5773),r=a(808),l=a(7378),o=a(8944),i=a(5642),s=a(1652),u=a(3772),c=a(6206),d=a(4246);const p=["className","component"];var g=a(4907);const m=function(e={}){const{defaultTheme:t,defaultClassName:a="MuiBox-root",generateClassName:g,styleFunctionSx:m=s.Z}=e,k=(0,i.ZP)("div")(m);return l.forwardRef((function(e,l){const i=(0,c.Z)(t),s=(0,u.Z)(e),{className:m,component:h="div"}=s,f=(0,r.Z)(s,p);return(0,d.jsx)(k,(0,n.Z)({as:h,ref:l,className:(0,o.Z)(m,g?g(a):a),theme:i},f))}))}({defaultTheme:(0,a(2905).Z)(),defaultClassName:"MuiBox-root",generateClassName:g.Z.generate});var k=m},7187:function(e,t,a){a.d(t,{ZP:function(){return d}});var n=a(5773),r=a(808),l=(a(7378),a(5318)),o=a(8128),i=(a(1510),a(7228)),s=a(2750),u=["components"],c={toc:[]};function d(e){var t=e.components,a=(0,r.Z)(e,u);return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("table",null,(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"Instruction"),(0,l.kt)("th",null,"API Resource(s)"),(0,l.kt)("th",null,"Description"))),(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("b",null,"AggregatorInit")),(0,l.kt)("td",null,(0,l.kt)("a",{className:"nowrap",href:"/publisher#custom-feed"},(0,l.kt)(i.Mp$,{className:"devicons__nowrap",mdxType:"FaBook"})," Publisher"),(0,l.kt)("br",null),(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-api/classes/AggregatorAccount#create"},(0,l.kt)(o.WZi,{className:"devicons__nowrap",mdxType:"SiTypescript"})," Typescript"),(0,l.kt)("br",null),(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardpy/aggregator#aggregatorinitparams-objects"},(0,l.kt)(o.Cul,{className:"devicons__nowrap",mdxType:"SiPython"})," Python"),(0,l.kt)("br",null),(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-cli/aggregator#sbv2-aggregatorcreatejson-definitionfile"},(0,l.kt)(o.wdL,{className:"devicons__nowrap",mdxType:"SiPowershell"})," CLI")),(0,l.kt)("td",null,(0,l.kt)(s.Z,{mdxType:"Typography"},"Create a new AggregatorAccount with a specified configuration"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("b",null,"PermissionInit")),(0,l.kt)("td",null,(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-api/classes/PermissionAccount#create"},(0,l.kt)(o.WZi,{className:"devicons__nowrap",mdxType:"SiTypescript"})," Typescript"),(0,l.kt)("br",null),(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardpy/permission#permissioninitparams-objects"},(0,l.kt)(o.Cul,{className:"devicons__nowrap",mdxType:"SiPython"})," Python"),(0,l.kt)("br",null)),(0,l.kt)("td",null,(0,l.kt)(s.Z,{mdxType:"Typography"},"Create a new PermissionAccount with an oracle queue as the grantee"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("b",null,"AggregatorAddJob")),(0,l.kt)("td",null,(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-api/classes/AggregatorAccount#addjob"},(0,l.kt)(o.WZi,{className:"devicons__nowrap",mdxType:"SiTypescript"})," Typescript"),(0,l.kt)("br",null),(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-cli/aggregator#sbv2-aggregatoraddjob-aggregatorkey"},(0,l.kt)(o.wdL,{className:"devicons__nowrap",mdxType:"SiPowershell"})," CLI")),(0,l.kt)("td",null,(0,l.kt)(s.Z,{mdxType:"Typography"},"Add a job to an aggregator"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("b",null,"AggregatorRemoveJob")),(0,l.kt)("td",null,(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-api/classes/AggregatorAccount#removejob"},(0,l.kt)(o.WZi,{className:"devicons__nowrap",mdxType:"SiTypescript"})," Typescript"),(0,l.kt)("br",null),(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-cli/aggregator#sbv2-aggregatorremovejob-aggregatorkey-jobkey"},(0,l.kt)(o.wdL,{className:"devicons__nowrap",mdxType:"SiPowershell"})," CLI")),(0,l.kt)("td",null,(0,l.kt)(s.Z,{mdxType:"Typography"},"Remove a job from an aggregator"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("b",null,"AggregatorOpenRound")),(0,l.kt)("td",null,(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-api/classes/AggregatorAccount#openround"},(0,l.kt)(o.WZi,{className:"devicons__nowrap",mdxType:"SiTypescript"})," Typescript"),(0,l.kt)("br",null),(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardpy/aggregator#aggregatoropenroundparams-objects"},(0,l.kt)(o.Cul,{className:"devicons__nowrap",mdxType:"SiPython"})," Python"),(0,l.kt)("br",null),(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-cli/aggregator#sbv2-aggregatorupdate-aggregatorkey"},(0,l.kt)(o.wdL,{className:"devicons__nowrap",mdxType:"SiPowershell"})," CLI")),(0,l.kt)("td",null,(0,l.kt)(s.Z,{mdxType:"Typography"},"Open a new round and request a new result from a batch of oracles"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("b",null,"AggregatorSetAuthority")),(0,l.kt)("td",null,(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-api/classes/AggregatorAccount#setauthority"},(0,l.kt)(o.WZi,{className:"devicons__nowrap",mdxType:"SiTypescript"})," Typescript")),(0,l.kt)("td",null,(0,l.kt)(s.Z,{mdxType:"Typography"},"Set an aggregator's authority"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("b",null,"AggregatorSetBatchSize")),(0,l.kt)("td",null,(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-api/classes/AggregatorAccount#setbatchsize"},(0,l.kt)(o.WZi,{className:"devicons__nowrap",mdxType:"SiTypescript"})," Typescript")),(0,l.kt)("td",null,(0,l.kt)(s.Z,{mdxType:"Typography"},"Set the number of oracles that get assigned to an openRound call"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("b",null,"AggregatorSetHistoryBuffer")),(0,l.kt)("td",null,(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-api/classes/AggregatorAccount#sethistorybuffer"},(0,l.kt)(o.WZi,{className:"devicons__nowrap",mdxType:"SiTypescript"})," Typescript"),(0,l.kt)("br",null),(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardpy/aggregator#aggregatorsethistorybufferparams-objects"},(0,l.kt)(o.Cul,{className:"devicons__nowrap",mdxType:"SiPython"})," Python")),(0,l.kt)("td",null,(0,l.kt)(s.Z,{mdxType:"Typography"},"Set the history buffer assigned to an aggregator in order to store the last N accepted results"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("b",null,"AggregatorSetMinJobs")),(0,l.kt)("td",null,(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-api/classes/AggregatorAccount#setminjobs"},(0,l.kt)(o.WZi,{className:"devicons__nowrap",mdxType:"SiTypescript"})," Typescript")),(0,l.kt)("td",null,(0,l.kt)(s.Z,{mdxType:"Typography"},"Set the minimum jobs that must respond before an oracle reports a result"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("b",null,"AggregatorSetMinOracles")),(0,l.kt)("td",null,(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-api/classes/AggregatorAccount#setminoracles"},(0,l.kt)(o.WZi,{className:"devicons__nowrap",mdxType:"SiTypescript"})," Typescript")),(0,l.kt)("td",null,(0,l.kt)(s.Z,{mdxType:"Typography"},"Set the minimum oracles that must respond before a result is accepted on-chain"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("b",null,"AggregatorSetQueue")),(0,l.kt)("td",null),(0,l.kt)("td",null,(0,l.kt)(s.Z,{mdxType:"Typography"},"Set the oracle queue an aggregator is assigned to"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("b",null,"AggregatorSetVarianceThreshold")),(0,l.kt)("td",null),(0,l.kt)("td",null,(0,l.kt)(s.Z,{mdxType:"Typography"},"Set an aggregators variance threshold"))),(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("b",null,"AggregatorLock")),(0,l.kt)("td",null,(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-api/classes/AggregatorAccount#lock"},(0,l.kt)(o.WZi,{className:"devicons__nowrap",mdxType:"SiTypescript"})," Typescript")),(0,l.kt)("td",null,(0,l.kt)(s.Z,{mdxType:"Typography"},"Lock an aggregator's config and prevent future changes"))))))}d.isMDXComponent=!0},9338:function(e,t,a){a.d(t,{ZP:function(){return c}});var n=a(5773),r=a(808),l=(a(7378),a(5318)),o=a(8128),i=(a(1510),a(2750)),s=["components"],u={toc:[]};function c(e){var t=e.components,a=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("table",null,(0,l.kt)("thead",null,(0,l.kt)("tr",null,(0,l.kt)("th",null,"Instruction"),(0,l.kt)("th",null,"API Resource(s)"),(0,l.kt)("th",null,"Description"))),(0,l.kt)("tbody",null,(0,l.kt)("tr",null,(0,l.kt)("td",null,(0,l.kt)("b",null,"JobInit")),(0,l.kt)("td",null,(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-api/classes/JobAccount#create"},(0,l.kt)(o.WZi,{className:"devicons__nowrap",mdxType:"SiTypescript"})," Typescript"),(0,l.kt)("br",null),(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardpy/job#jobinitparams-objects"},(0,l.kt)(o.Cul,{className:"devicons__nowrap",mdxType:"SiPython"})," Python"),(0,l.kt)("br",null),(0,l.kt)("a",{className:"nowrap",href:"/api/switchboardv2-cli/job"},(0,l.kt)(o.wdL,{className:"devicons__nowrap",mdxType:"SiPowershell"})," CLI")),(0,l.kt)("td",null,(0,l.kt)(i.Z,{mdxType:"Typography"},"Create a new JobAccount with a specified configuration"))))))}c.isMDXComponent=!0},4373:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return c}});var n=a(5773),r=a(808),l=(a(7378),a(5318)),o=["components"],i={},s=void 0,u={unversionedId:"idl/accounts/AggregatorAccountData",id:"idl/accounts/AggregatorAccountData",title:"AggregatorAccountData",description:"Size 0.027693840 SOL",source:"@site/api/idl/accounts/AggregatorAccountData.md",sourceDirName:"idl/accounts",slug:"/idl/accounts/AggregatorAccountData",permalink:"/api/idl/accounts/AggregatorAccountData",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/api/idl/accounts/"},next:{title:"AggregatorHistoryBuffer",permalink:"/api/idl/accounts/AggregatorHistoryBuffer"}},c=[],d={toc:c};function p(e){var t=e.components,a=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("b",null,"Size: "),"3851 Bytes",(0,l.kt)("br",null),(0,l.kt)("b",null,"Rent Exemption: "),"0.027693840 SOL",(0,l.kt)("br",null),(0,l.kt)("br",null),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"u8","[32]"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the aggregator to store on-chain.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"metadata"),(0,l.kt)("td",{parentName:"tr",align:null},"u8","[128]"),(0,l.kt)("td",{parentName:"tr",align:null},"Metadata of the aggregator to store on-chain.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"authorWallet"),(0,l.kt)("td",{parentName:"tr",align:null},"publicKey"),(0,l.kt)("td",{parentName:"tr",align:null},"An optional wallet for receiving kickbacks from job usage in feeds. Defaults to token vault.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"queuePubkey"),(0,l.kt)("td",{parentName:"tr",align:null},"publicKey"),(0,l.kt)("td",{parentName:"tr",align:null},"Pubkey of the queue the aggregator belongs to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"oracleRequestBatchSize"),(0,l.kt)("td",{parentName:"tr",align:null},"u32"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of oracles assigned to an update request")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"minOracleResults"),(0,l.kt)("td",{parentName:"tr",align:null},"u32"),(0,l.kt)("td",{parentName:"tr",align:null},"Minimum number of oracle responses required before a round is validated.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"minJobResults"),(0,l.kt)("td",{parentName:"tr",align:null},"u32"),(0,l.kt)("td",{parentName:"tr",align:null},"Minimum number of job results before an oracle accepts a result")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"minUpdateDelaySeconds"),(0,l.kt)("td",{parentName:"tr",align:null},"u32"),(0,l.kt)("td",{parentName:"tr",align:null},"Minimum number of seconds required between aggregator rounds.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"startAfter"),(0,l.kt)("td",{parentName:"tr",align:null},"i64"),(0,l.kt)("td",{parentName:"tr",align:null},"unix_timestamp for which no feed update will occur before.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"varianceThreshold"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/api/idl/types/SwitchboardDecimal"},"SwitchboardDecimal")),(0,l.kt)("td",{parentName:"tr",align:null},"Change percentage required between a previous round and the current round. If variance percentage is not met, reject new oracle responses.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"forceReportPeriod"),(0,l.kt)("td",{parentName:"tr",align:null},"i64"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of seconds for which, even if the variance threshold is not passed, accept new responses from oracles.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"expiration"),(0,l.kt)("td",{parentName:"tr",align:null},"i64"),(0,l.kt)("td",{parentName:"tr",align:null},"Timestamp when the feed is no longer needed")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"consecutiveFailureCount"),(0,l.kt)("td",{parentName:"tr",align:null},"u64"),(0,l.kt)("td",{parentName:"tr",align:null},"Counter for the number of consecutive failures before a feed is removed from a queue. If set to 0, failed feeds will remain on the queue.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"nextAllowedUpdateTime"),(0,l.kt)("td",{parentName:"tr",align:null},"i64"),(0,l.kt)("td",{parentName:"tr",align:null},"Timestamp when the next update request will be available")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"isLocked"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"Flag for whether an aggregators configuration is locked for editing")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"crankPubkey"),(0,l.kt)("td",{parentName:"tr",align:null},"publicKey"),(0,l.kt)("td",{parentName:"tr",align:null},"Optional, public key of the crank the aggregator is currently using. Event based feeds do not need a crank.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"latestConfirmedRound"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/api/idl/types/AggregatorRound"},"AggregatorRound")),(0,l.kt)("td",{parentName:"tr",align:null},"Latest confirmed update request result that has been accepted as valid.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"currentRound"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/api/idl/types/AggregatorRound"},"AggregatorRound")),(0,l.kt)("td",{parentName:"tr",align:null},"Oracle results from the current round of update request that has not been accepted as valid yet")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jobPubkeysData"),(0,l.kt)("td",{parentName:"tr",align:null},"publicKey","[16]"),(0,l.kt)("td",{parentName:"tr",align:null},"List of public keys containing the job definitions for how data is sourced off-chain by oracles")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jobHashes"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/api/idl/types/Hash"},"Hash"),"[16]"),(0,l.kt)("td",{parentName:"tr",align:null},"Used to protect against malicious RPC nodes providing incorrect task definitions to oracles before fulfillment")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jobPubkeysSize"),(0,l.kt)("td",{parentName:"tr",align:null},"u32"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of jobs assigned to an oracle")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jobsChecksum"),(0,l.kt)("td",{parentName:"tr",align:null},"u8","[32]"),(0,l.kt)("td",{parentName:"tr",align:null},"Used to protect against malicious RPC nodes providing incorrect task definitions to oracles before fulfillment")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"authority"),(0,l.kt)("td",{parentName:"tr",align:null},"publicKey"),(0,l.kt)("td",{parentName:"tr",align:null},"The account delegated as the authority to for changing configs or withdrawing from a lease.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"historyBuffer"),(0,l.kt)("td",{parentName:"tr",align:null},"publicKey"),(0,l.kt)("td",{parentName:"tr",align:null},"Optional, public key of a history buffer account storing the last N accepted results and their timestamps.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ebuf"),(0,l.kt)("td",{parentName:"tr",align:null},"u8","[192]"),(0,l.kt)("td",{parentName:"tr",align:null},"Reserved")))))}p.isMDXComponent=!0},6003:function(e,t,a){var n=a(5310),r=a(7378),l=a(1142),o=a(2638);t.Z=function(e){var t=(0,o.Z)().isDarkTheme,a="inherit";e.lightBg&&!t&&(a=e.lightBg),e.darkBg&&t&&(a=e.darkBg);var i={};return e.sx&&(i=Object.assign({backgroundColor:a,m:"auto",display:"flex"},i,e.sx)),r.createElement(n.Z,{component:"img",sx:i,src:(0,l.Z)(e.img)})}},1510:function(e,t,a){a.d(t,{N:function(){return o}});var n=a(9523),r=a(5773),l=a(7378);function o(e){return l.createElement(n.Z,(0,r.Z)({},e,{viewBox:"0 0 251 283.9"}),l.createElement("linearGradient",{id:"SVGID_1_",gradientUnits:"userSpaceOnUse",x1:"125.5",y1:"52.0877",x2:"125.5",y2:"253.0878",gradientTransform:"matrix(1 0 0 -1 0 285.9755)"},l.createElement("stop",{offset:"0"}),l.createElement("stop",{offset:"1"})),l.createElement("path",{d:"M125.5,233.9c-43.1,0-78.1-35-78.1-78.1c0-41.9,70.7-115.9,73.7-119l3.7-3.9l3.8,3.8c3.1,3.1,75,77.1,75,119 C203.6,198.9,168.6,233.9,125.5,233.9L125.5,233.9z M124.9,48c-6.2,6.7-19.2,21.2-32.1,38.2c-22.9,30.2-35,54.2-35,69.5 c0,37.3,30.4,67.7,67.7,67.7s67.7-30.4,67.7-67.7c0-15.3-12.3-39.3-35.6-69.5C144.5,69.3,131.2,54.7,124.9,48z"}),l.createElement("linearGradient",{id:"SVGID_2_",gradientUnits:"userSpaceOnUse",x1:"125.6",y1:"27.0877",x2:"125.6",y2:"269.3627",gradientTransform:"matrix(1 0 0 -1 0 285.9755)"},l.createElement("stop",{offset:"0"}),l.createElement("stop",{offset:"1"})),l.createElement("path",{d:"M125.5,258.9c-56.9,0-103.1-46.3-103.1-103.1c0-55.6,77.6-133.2,80.9-136.4c2-2,5.4-2,7.4,0s2,5.4,0,7.4 c-0.8,0.8-77.8,77.8-77.8,129c0,51.1,41.6,92.7,92.7,92.7s92.7-41.6,92.7-92.7c0-21-13.6-50-39.4-84.1 c-19.8-26.1-39.7-45.9-39.9-46.1c-2.1-2-2.1-5.3,0-7.4c2-2.1,5.3-2.1,7.4,0c3.4,3.3,82.4,81.9,82.4,137.6 C228.6,212.6,182.4,258.9,125.5,258.9L125.5,258.9z"}),l.createElement("linearGradient",{id:"SVGID_3_",gradientUnits:"userSpaceOnUse",x1:"125.5",y1:"2.0877",x2:"125.5",y2:"285.9755",gradientTransform:"matrix(1 0 0 -1 0 285.9755)"},l.createElement("stop",{offset:"0"}),l.createElement("stop",{offset:"1"})),l.createElement("path",{d:"M125.5,283.9C56.3,283.9,0,227.6,0,158.4c0-28.6,14.4-63.8,42.7-104.5C63.6,23.9,84.1,2.5,85,1.6 c2-2.1,5.3-2.1,7.4-0.1s2.1,5.3,0.1,7.4C92.3,9.1,71.6,30.7,51.2,60c-26.7,38.3-40.8,72.3-40.8,98.4c0,63.4,51.6,115.1,115.1,115.1 s115.1-51.6,115.1-115.1c0-26.1-14.2-60.1-41.1-98.4C178.9,30.7,158,9.1,157.8,8.9c-2-2.1-2-5.4,0.1-7.4s5.4-2,7.4,0.1 c3.5,3.6,85.7,89,85.7,156.8C251,227.6,194.7,283.9,125.5,283.9z"}))}},3041:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return g}});var n=a(5773),r=a(808),l=(a(7378),a(5318)),o=a(6003),i=a(9556),s=(a(7187),a(4373)),u=(a(9338),["components"]),c={sidebar_position:10,title:"Aggregator",slug:"."},d=void 0,p={unversionedId:"architecture/feeds/aggregator",id:"architecture/feeds/aggregator",title:"Aggregator",description:"<MarkdownImage",source:"@site/docs/architecture/feeds/aggregator.mdx",sourceDirName:"architecture/feeds",slug:"/architecture/feeds/",permalink:"/architecture/feeds/",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"Aggregator",slug:"."},sidebar:"tutorialSidebar",previous:{title:"Activities",permalink:"/architecture/oracles/activities"},next:{title:"Job",permalink:"/architecture/feeds/job"}},g=[{value:"Functions",id:"functions",children:[{value:"\ud83d\ude80Job Definitions",id:"job-definitions",children:[{value:"Private APIs",id:"private-apis",children:[],level:4}],level:3},{value:"\ud83d\ude80Oracle Consensus",id:"oracle-consensus",children:[],level:3},{value:"\ud83d\ude80Update Requests",id:"update-requests",children:[{value:"Manual",id:"manual",children:[],level:4},{value:"Crank",id:"crank",children:[],level:4}],level:3},{value:"\ud83d\ude80Reward Oracles",id:"reward-oracles",children:[],level:3}],level:2},{value:"Account Schema",id:"account-schema",children:[{value:"\ud83d\udce6AggregatorAccountData",id:"aggregatoraccountdata",children:[],level:3}],level:2},{value:"More Info",id:"more-info",children:[],level:2}],m={toc:g};function k(e){var t=e.components,a=(0,r.Z)(e,u);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(o.Z,{img:"/img/L2_Aggregator_Accounts.png",sx:{maxHeight:{sm:"100%",md:"400px"}},mdxType:"MarkdownImage"}),(0,l.kt)("p",null,"An aggregator or data feed is what on-chain developers use when building smart contracts. A data feed is a collection of jobs that get aggregated to produce some deterministic result. Each job is associated with an endpoint and has a number of tasks that get executed in sequential order in order to produce a single value. Typically the first task in a job will fetch external data with subsequent tasks responsible for parsing the response and transforming the value into a single data type, like an integer or decimal. When an oracle is assigned to process a data feed update, the oracle executes the defined jobs and publishes the median result on-chain. The data feed then computes the final value as the median response among the assigned oracles. In summary, the data feed is the blueprint for how data gets fetched from off-chain sources."),(0,l.kt)("p",null,"Along with the jobs, a data feed also includes a configuration dictating how often a feed should be updated and the minimum number of jobs or oracles that must respond before accepting a result. The publisher is ultimately responsible for building a data feed and making the necessary trade-offs as it\u2019s a careful balance between cost and update interval. The publisher is usually the on-chain consumer of the data and will have the most familiarity with how the data may be used to make these considerations."),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("p",null,"An aggregator is responsible for the following functions:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)(i.Z,{to:"#job-definitions",mdxType:"Link"},(0,l.kt)("b",null,"Job Definitions: ")),"Defines how a result is calculated by an oracle."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)(i.Z,{to:"#oracle-consensus",mdxType:"Link"},(0,l.kt)("b",null,"Oracle Consensus: ")),"Defines how a result is accepted on-chain by a set of oracle responses."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)(i.Z,{to:"#update-requests",mdxType:"Link"},(0,l.kt)("b",null,"Update Requests: ")),"Defines how an update can be requested."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)(i.Z,{to:"#update-requests",mdxType:"Link"},(0,l.kt)("b",null,"Oracle Rewards: ")),"Rewards oracles for successfully completing an update request.")),(0,l.kt)("h3",{id:"job-definitions"},"\ud83d\ude80Job Definitions"),(0,l.kt)("p",null,"An aggregator stores a list of JobAccount public keys in ",(0,l.kt)("inlineCode",{parentName:"p"},"jobPubkeysData"),", as well as the current size ",(0,l.kt)("inlineCode",{parentName:"p"},"jobPubkeysSize"),", the hashes of the jobs in ",(0,l.kt)("inlineCode",{parentName:"p"},"jobHashes")," to prevent malicious RPC nodes from swapping out job definitions, and their checksums in ",(0,l.kt)("inlineCode",{parentName:"p"},"jobsChecksum"),"."),(0,l.kt)("p",null,"An aggregator's config also includes ",(0,l.kt)("inlineCode",{parentName:"p"},"minJobResults")," which determines how many jobs must respond before an oracle responds on-chain. This is useful if you have an endpoint that may be unreliable and you don't want it to affect the oracle response."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/architecture/feeds/job"},"See /architecture/feeds/job for more info")),(0,l.kt)("h4",{id:"private-apis"},"Private APIs"),(0,l.kt)("p",null,"Job definitions support injecting environment variables from the oracle into the tasks before execution. This functionality requires a private oracle queue because the API keys must be provided to each oracle fulfilling an update request thus requires a higher level of trust between the oracle and the API key owner."),(0,l.kt)("h3",{id:"oracle-consensus"},"\ud83d\ude80Oracle Consensus"),(0,l.kt)("p",null,"An aggregator must specify an ",(0,l.kt)("inlineCode",{parentName:"p"},"oracleRequestBatchSize")," which determines how many oracles get assigned to each update request. This induces extra cost on each update request but requires a higher degree of oracle collusion to affect the accepted on-chain result."),(0,l.kt)("p",null,"An aggregator also specifies ",(0,l.kt)("inlineCode",{parentName:"p"},"minOracleResults")," which is the number of oracles that must respond before a value is accepted on-chain."),(0,l.kt)("h3",{id:"update-requests"},"\ud83d\ude80Update Requests"),(0,l.kt)("p",null,"An aggregator has a number of config options which dictate whether an update request is valid. An aggregator can specify ",(0,l.kt)("inlineCode",{parentName:"p"},"startAfter")," to only allow update request after a given unix timestamp. An aggregator can also specify ",(0,l.kt)("inlineCode",{parentName:"p"},"expiration")," to only allow update request before a given unix timestamp. An aggregator must specify ",(0,l.kt)("inlineCode",{parentName:"p"},"minUpdateDelaySeconds")," which enforces a minimum update delay between requests."),(0,l.kt)("h4",{id:"manual"},"Manual"),(0,l.kt)("p",null,"An aggregator can be updated by anyone by invoking the open round instruction. If a request is considered valid, it is assigned to a batch of oracles."),(0,l.kt)("h4",{id:"crank"},"Crank"),(0,l.kt)("p",null,"An aggregator with valid queue permissions can decide to join a queues crank. A crank is a collection of aggregator public keys, ordered by their next available update, with some level of jitter added to prevent a predictable oracle allocation cycle. Anyone can turn a crank and be rewarded if any update requests are successful."),(0,l.kt)("h3",{id:"reward-oracles"},"\ud83d\ude80Reward Oracles"),(0,l.kt)("p",null,"An aggregator uses a ",(0,l.kt)("a",{parentName:"p",href:"/architecture/feeds/lease"},"Lease Contract")," to reward oracles each time an update request is fulfilled. The lease contract amount is derived from an aggregator's ",(0,l.kt)("inlineCode",{parentName:"p"},"minUpdateDelaySeconds"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"oracleRequestBatchSize"),", and the oracle queue's specified ",(0,l.kt)("inlineCode",{parentName:"p"},"reward"),"."),(0,l.kt)("h2",{id:"account-schema"},"Account Schema"),(0,l.kt)("h3",{id:"aggregatoraccountdata"},"\ud83d\udce6AggregatorAccountData"),(0,l.kt)(s.default,{mdxType:"AggregatorAccountData"}),(0,l.kt)("h2",{id:"more-info"},"More Info"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)(i.Z,{className:"link__nocolor",to:"/publisher",mdxType:"Link"},"\u2139\ufe0f Publisher")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)(i.Z,{className:"link__nocolor",to:"/job-directory",mdxType:"Link"},"\u2139\ufe0f Job Directory"))))}k.isMDXComponent=!0}}]);