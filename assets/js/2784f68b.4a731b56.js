"use strict";(self.webpackChunk_switchboard_xyz_v2_docs=self.webpackChunk_switchboard_xyz_v2_docs||[]).push([[1457],{5318:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var o=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(n),m=r,h=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return n?o.createElement(h,l(l({ref:t},u),{},{components:n})):o.createElement(h,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8495:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var o=n(5773),r=n(808),a=(n(7378),n(5318)),l=["components"],i={sidebar_position:8,slug:"/developers/localnet",title:"Localnet Integration"},c=void 0,s={unversionedId:"developers/localnet",id:"developers/localnet",title:"Localnet Integration",description:"Switchboard provides some javascript functions to copy and load a devnet environment on your local Solana cluster. This guide will assume you're using the Anchor framework but in reality will work with the standard Solana toolchain.",source:"@site/docs/developers/localnet.mdx",sourceDirName:"developers",slug:"/developers/localnet",permalink:"/developers/localnet",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,slug:"/developers/localnet",title:"Localnet Integration"},sidebar:"tutorialSidebar",previous:{title:"Developer Resources",permalink:"/developers"},next:{title:"Javascript",permalink:"/developers/js"}},u=[{value:"Environment",id:"environment",children:[],level:2},{value:"Context",id:"context",children:[],level:2}],d={toc:u};function p(e){var t=e.components,n=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Switchboard provides some javascript functions to copy and load a devnet environment on your local Solana cluster. This guide will assume you're using the Anchor framework but in reality will work with the standard Solana toolchain."),(0,a.kt)("p",null,"You ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"must"))," have the following dependencies:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.rust-lang.org/tools/install"},"Rust")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.solana.com/cli/install-solana-cli-tools"},"Solana")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.docker.com/compose/install"},"Docker Compose"))),(0,a.kt)("h2",{id:"environment"},"Environment"),(0,a.kt)("p",null,"First, we need to create a Switchboard environment on devnet so we can easily copy it to localnet when running any test."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { SwitchboardTestContext } from "@switchboard-xyz/switchboard-v2";\n\nconst testEnv = await SwitchboardTestEnvironment.create(payerKeypair, {\n  USDC_MINT: new PublicKey("4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU"),\n});\ntestEnv.writeAll(walletPath, process.cwd());\n')),(0,a.kt)("p",null,"This will create your own Switchboard queue and oracle and grant it permission to fulfill aggregator update request. It will also aggregate the necessary Switchboard devnet accounts such as the program ID program data address, and the switchboard state including its token mint and vault. The second arguement allows you to pass in additional devnet accounts you wish to copy."),(0,a.kt)("p",null,"It will then write the environment to the filesystem and output the following files:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"start-local-validator.sh - to start a local Solana cluster with the necessary accounts copied"),(0,a.kt)("li",{parentName:"ul"},"start-oracle.sh - to start a Switchboard oracle that connects to your local cluster"),(0,a.kt)("li",{parentName:"ul"},"switchboard.env - stores the Switchboard environment in an env file for convienent scripting"),(0,a.kt)("li",{parentName:"ul"},"switchboard.json - stores the Switchboard environment in a json file")),(0,a.kt)("p",null,"You should also have a docker-compose file pointing to the local cluster which will look something like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="docker-compose.yml"',title:'"docker-compose.yml"'},'version: "3.3"\nservices:\n  oracle:\n    image: "switchboardlabs/node:dev-v2-3-11-22"\n    network_mode: host\n    restart: always\n    secrets:\n      - PAYER_SECRETS\n    environment:\n      - CLUSTER=localnet\n      - HEARTBEAT_INTERVAL=15 # Seconds\n      - ORACLE_KEY=${ORACLE}\nsecrets:\n  PAYER_SECRETS:\n    file: ${PAYER_KEYPAIR}\n')),(0,a.kt)("h2",{id:"context"},"Context"),(0,a.kt)("p",null,"The context provides some helper functions to load a Switchboard environment in your test and manually set an aggregator. This is useful to see how a Switchboard update will effect your program state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { SwitchboardTestContext } from "@switchboard-xyz/switchboard-v2";\n\nconst switchboard = await SwitchboardTestContext.loadFromEnv(\n  program.provider,\n  "./switchboard.env"\n);\n\n// create a static feed with a value of 100\nlet staticFeed = await switchboard.createStaticFeed(100);\nawait staticFeed.openRound({\n  oracleQueueAccount: switchboard.queue,\n  payoutWallet: switchboard.tokenWallet,\n});\n\n// updating the static feed value to 101\nawait switchboard.updateStaticFeed(staticFeed, 101);\nawait staticFeed.openRound({\n  oracleQueueAccount: switchboard.queue,\n  payoutWallet: switchboard.tokenWallet,\n});\n')))}p.isMDXComponent=!0}}]);